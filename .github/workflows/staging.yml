name: Automated Deployment to Staging Environment

on: 
  workflow_dispatch:

env:
  STAGING_CLUSTER_NAME: week10-aks-cluster-staging
  STAGING_RESOURCE_GROUP: week10-rg-staging
  STAGING_STORAGE_NAME: week10storagestaging
  LOCATION: eastus
  AZURE_CONTAINER_REGISTRY: ${{ secrets.AZURE_CONTAINER_REGISTRY }}

jobs:
  test_and_push_backend:
    uses: ./.github/workflows/backend_ci.yml
    secrets:
      AZURE_CONTAINER_REGISTRY: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
      AZURE_CREDENTIALS: ${{ secrets.STAGING_AZURE_CREDENTIALS }}
  
  test_and_push_frontend:
    uses: ./.github/workflows/frontend_ci.yml
    secrets:
      AZURE_CONTAINER_REGISTRY: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
      AZURE_CREDENTIALS: ${{ secrets.STAGING_AZURE_CREDENTIALS }}
  
  create_staging_environment:
    needs: 
      - test_and_push_backend
      - test_and_push_frontend
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.STAGING_AZURE_CREDENTIALS }}

    - name: Create AKS Cluster
      run: | 
        az aks create \
        --resource-group ${{ env.STAGING_RESOURCE_GROUP }} \
        --name ${{ env.STAGING_CLUSTER_NAME }} \
        --node-count 1 \
        --node-vm-size Standard_D2s_v3 \
        --generate-ssh-keys

    - name: Create Azure Storage Account
      run: |
        az storage account create \
          --name ${{ env.STAGING_STORAGE_NAME }} \
          --resource-group ${{ env.STAGING_RESOURCE_GROUP }} \
          --location ${{ env.LOCATION }} \
          --sku Standard_LRS
    # - name: Delete AKS Cluster
    #   if: always()
    #   run: |
    #     az aks delete \
    #     --resource-group ${{ env.STAGING_RESOURCE_GROUP }} \
    #     --name ${{ env.STAGING_CLUSTER_NAME }} \
    #     --yes
    - name: Logout from Azure
      run: az logout
  
  deploy_backend:
    needs:
      - create_staging_environment
    uses: ./.github/workflows/backend_cd.yml
    with:
      aks_cluster_name: week10-aks-cluster-staging
      aks_resource_group: week10-rg-staging
      aks_acr_name: sit722devopsacraprylle
      aks_storage_name: week10storagestaging
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.STAGING_AZURE_CREDENTIALS }}
  
  deploy_frontend:
    needs: deploy_backend
    uses: ./.github/workflows/frontend_cd.yml
    with:
      product_api_ip: ${{ needs.deploy_backend.outputs.PRODUCT_API_IP }}
      order_api_ip: ${{ needs.deploy_backend.outputs.ORDER_API_IP }}
      customer_api_ip: ${{ needs.deploy_backend.outputs.CUSTOMER_API_IP }}
      aks_cluster_name: 'week10-aks-cluster-staging'
      aks_resource_group: 'week10-rg-staging'
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.STAGING_AZURE_CREDENTIALS }}
      AZURE_CONTAINER_REGISTRY: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  
  acceptance_testing:
    needs: deploy_frontend
    runs-on: ubuntu-latest
    steps:
      - name: Get Frontend IP Address
        run: |
          FRONTEND_IP=$(kubectl get service frontend-w05-aks -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "FRONTEND_IP=$FRONTEND_IP" >> $GITHUB_ENV

      - name: Test Backend Services
        run: |
          echo "Testing Product Service at ${{ needs.deploy_backend.outputs.PRODUCT_API_IP }}"
          curl -f http://${{ needs.deploy_backend.outputs.PRODUCT_API_IP }} || exit 1

          echo "Testing Order Service at ${{ needs.deploy_backend.outputs.ORDER_API_IP }}"
          curl -f http://${{ needs.deploy_backend.outputs.ORDER_API_IP }} || exit 1

          echo "Testing Customer Service at ${{ needs.deploy_backend.outputs.CUSTOMER_API_IP }}"
          curl -f http://${{ needs.deploy_backend.outputs.CUSTOMER_API_IP }} || exit 1

          echo "Testing Frontend at $FRONTEND_IP"
          curl -f http://$FRONTEND_IP || exit 1